#!/usr/bin/env python
# encoding: utf-8
"""
Crucible Build System

Copyright (C) 2008 Carleton College.
"""

import sys
import os
import zipfile
import tarfile
import re
import time

def main():
	from optparse import OptionParser
	
	parser = OptionParser(usage='%prog -v {version} target [, target...]')
	parser.add_option('-v', '--version', dest='version',
		help='version identifier string used in building the package',
		metavar='VERSION')
	parser.add_option('-p', '--path', dest='path', metavar='PATH',
		help='path to the Crucible folder')
	parser.add_option('--archive-formats', dest='archive_format',
		help='archive formats (zip, tar.gz, and/or tar.bz2)', metavar='FORMAT')
	
	parser.set_defaults(path=None, archive_format='tar.bz2')
	
	options, args = parser.parse_args()
	
	if not options.version:
		parser.error('please specify the Crucible version being built')
	
	
	

class Builder(object):
	"""Builds JavaScript projects."""
	def __init__(self, base):
		self.base = base
		
	def _abspath(self, path):
		"""Ensures that {path} is an absolute path."""
		path = os.path.normpath(path)
		if path != os.path.abspath(path):
			path = os.path.join(self.base, path)
	
	def _package(self, path, **options):
		path = self._abspath(path)
		
		def create_packager(format):
			format = format.lower()
			if format == 'zip':
				return ZipPackager(path, )
				
class CrucibleBuilder(Builder):
	"""Builds Crucible."""
	def __init__(self, path, options):
		if not path:
			path = os.path.dirname(os.path.abspath(sys.argv[0]))
		
		super(CrucibleBuilder, self).__init__(path)
		
			
class Packager(object):
	def __init__(self, path, base=None):
		self.path = path
		self.base = base or os.path.dirname(self.path)
		
	def package(self):
		raise NotImplementedError()
		
	def walk(self, include_dirs=False):
		start = len(os.path.split(self.path))
		for folder, subfolders, files in os.walk(self.path):
			folder = os.path.join(base, os.path.split(folder)[start:])
			
			if include_dirs:
				yield folder
			
			for filename in files:
				yield os.path.join(folder, filename)
		
class ZipPackager(packager):
	"""Packages a folder into a ZIP archive."""
	def __init__(self, path, base=None, outpath=None):
		super(ZipPackager, self).__init__(path, base)
		self.outpath = outpath or path + '.zip'
		
	def package(self):
		archive = zipfile.ZipFile(self.outpath, 'w', zipfile.ZIP_DEFLATED)
		
		try:
			for filename in self.walk():
				path = os.path.join(self.path, filename)
				archive.write(path, filename)
		finally:
			archive.close()
		
			
class TarPackager(packager):
	"""Packages a folder into a TAR archive."""
	def __init__(self, path, base=None, compression=None, outpath=None):
		super(ZipPackager, self).__init__(path, base)
		self.mode = 'w:' + (compression or '')
		if outpath:
			self.outpath = outpath
		else:
			self.outpath = path + '.tar'
			if compression:
				self.outpath += '.' + compression
	
	def package(self):
		archive = tarfile.open(self.outpath, self.mode)
		try:
			for filename in self.walk(True):
				path = os.path.join(self.path, filename)
				archive.add(path, filename, False)
		finally:
			archive.close()


if __name__ == '__main__':
	main()

